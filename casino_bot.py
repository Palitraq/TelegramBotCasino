from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext, MessageHandler, filters, ConversationHandler
import datetime
import random
from database import (get_user_balance, update_user_balance, get_last_claim, 
                      update_last_claim, log_user_login, get_total_users, 
                      get_total_logins, is_admin)
import config

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_BET = 0

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
user_states = {}

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–¥–∏–Ω —Ä–∞–∑
DEFAULT_KEYBOARD = ReplyKeyboardMarkup([['–ò–≥—Ä–∞—Ç—å', '–ë–∞–ª–∞–Ω—Å'], ['–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞']], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_KEYBOARD = ReplyKeyboardMarkup([
    ['–ò–≥—Ä–∞—Ç—å', '–ë–∞–ª–∞–Ω—Å'], 
    ['–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞'], 
    ['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞']
], resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_keyboard(user_id):
    return ADMIN_KEYBOARD if user_id in config.ADMIN_IDS else DEFAULT_KEYBOARD

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    log_user_login(user_id)
    
    await update.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∞–∑–∏–Ω–æ –ë–æ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=get_keyboard(user_id)
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç—ã
async def slots_start(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–û—Ç 10-1000):', 
        reply_markup=get_keyboard(user_id)
    )
    return WAITING_FOR_BET


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏
async def process_bet(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    try:
        bet_amount = int(update.message.text)
        if bet_amount < 10 or bet_amount > 1000:
            await update.message.reply_text(
                '–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 1000 —Ç—É–≥—Ä–∏–∫–æ–≤.', 
                reply_markup=get_keyboard(user_id)
            )
            return WAITING_FOR_BET

        balance = get_user_balance(user_id)
        if balance < bet_amount:
            await update.message.reply_text(
                f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—É–≥—Ä–∏–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ç—É–≥—Ä–∏–∫–æ–≤.',
                reply_markup=get_keyboard(user_id)
            )
            return ConversationHandler.END

        await update.message.reply_text(
            f'–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet_amount}', 
            reply_markup=get_keyboard(user_id)
        )

        # –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
        balance -= bet_amount
        symbols = ['', '', '', '', '']
        result = [random.choice(symbols) for _ in range(3)]

        if result[0] == result[1] == result[2]:
            win_amount = bet_amount * 5
            balance += win_amount
            message = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} —Ç—É–≥—Ä–∏–∫–æ–≤!\n–°—Ç–∞–≤–∫–∞: {bet_amount}\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {" ".join(result)}'
        else:
            message = f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet_amount} —Ç—É–≥—Ä–∏–∫–æ–≤.\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {" ".join(result)}'

        update_user_balance(user_id, balance)
        await update.message.reply_text(
            message, 
            reply_markup=get_keyboard(user_id)
        )
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.', 
            reply_markup=get_keyboard(user_id)
        )
        return WAITING_FOR_BET


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
async def cancel(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    await update.message.reply_text(
        '–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', 
        reply_markup=get_keyboard(user_id)
    )
    return ConversationHandler.END


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /balance
async def balance(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    balance = get_user_balance(user_id)
    await update.message.reply_text(
        f'–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ç—É–≥—Ä–∏–∫–æ–≤.', 
        reply_markup=get_keyboard(user_id)
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /daily
async def daily(update: Update, context: CallbackContext) -> None:
    try:
        user_id = update.message.from_user.id
        last_claim = get_last_claim(user_id)
        now = datetime.datetime.now()

        if last_claim is None:
            # –ü–µ—Ä–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
            balance = get_user_balance(user_id) + 80
            update_user_balance(user_id, balance)
            update_last_claim(user_id)
            await update.message.reply_text(
                '–í—ã –ø–æ–ª—É—á–∏–ª–∏ 80 —Ç—É–≥—Ä–∏–∫–æ–≤! –°–ª–µ–¥—É—é—â–∏–π –ø–æ–¥–∞—Ä–æ–∫ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤.',
                reply_markup=get_keyboard(user_id)
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∏ –ª–∏ 12 —á–∞—Å–æ–≤
        time_diff = now - last_claim
        seconds_passed = time_diff.total_seconds()
        seconds_left = 12 * 3600 - seconds_passed
        
        if seconds_left > 0:
            hours_passed = int(seconds_passed // 3600)
            minutes_passed = int((seconds_passed % 3600) // 60)
            seconds_passed_remainder = int(seconds_passed % 60)
            hours_left = int(seconds_left // 3600)
            minutes_left = int((seconds_left % 3600) // 60)
            seconds_left_remainder = int(seconds_left % 60)

            passed_str = f"{hours_passed} —á. {minutes_passed} –º–∏–Ω. {seconds_passed_remainder} —Å–µ–∫."
            left_str = f"{hours_left} —á. {minutes_left} –º–∏–Ω. {seconds_left_remainder} —Å–µ–∫."

            await update.message.reply_text(
                f'–ü—Ä–æ—à–ª–æ –≤—Å–µ–≥–æ {passed_str}!\n–ü—Ä–∏—Ö–æ–¥–∏ —á–µ—Ä–µ–∑ {left_str}.',
                reply_markup=get_keyboard(user_id)
            )
            return

        # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
        balance = get_user_balance(user_id) + 80
        update_user_balance(user_id, balance)
        update_last_claim(user_id)
        await update.message.reply_text(
            '–í—ã –ø–æ–ª—É—á–∏–ª–∏ 80 —Ç—É–≥—Ä–∏–∫–æ–≤! –°–ª–µ–¥—É—é—â–∏–π –ø–æ–¥–∞—Ä–æ–∫ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤.',
            reply_markup=get_keyboard(user_id)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ daily: {e}")
        await update.message.reply_text(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            reply_markup=get_keyboard(user_id)
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
async def bot_stats(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in config.ADMIN_IDS:
        await update.message.reply_text(
            '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –±–æ—Ç–∞.',
            reply_markup=get_keyboard(user_id)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_users = get_total_users()
    total_logins = get_total_logins()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_message = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üîÑ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–æ–≤: {total_logins}"
    )
    
    await update.message.reply_text(
        stats_message,
        reply_markup=get_keyboard(user_id)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    user_id = update.message.from_user.id
    
    if text == '–ò–≥—Ä–∞—Ç—å':
        await slots_start(update, context)
    elif text == '–ë–∞–ª–∞–Ω—Å':
        await balance(update, context)
    elif text == '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞':
        await daily(update, context)
    elif text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞':
        await bot_stats(update, context)
    else:
        await update.message.reply_text(
            '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.',
            reply_markup=get_keyboard(user_id)
        )


def main() -> None:
    application = ApplicationBuilder().token(config.BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("daily", daily))
    application.add_handler(CommandHandler("stats", bot_stats))  

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç—ã
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('slots', slots_start),
                     MessageHandler(filters.Regex('^–ò–≥—Ä–∞—Ç—å$'), slots_start)],
        states={
            WAITING_FOR_BET: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_bet)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    application.add_handler(conv_handler)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & ~filters.Regex('^–ò–≥—Ä–∞—Ç—å$'),
        handle_message
    ))

    application.run_polling()
    application.idle()


if __name__ == '__main__':
    main()
